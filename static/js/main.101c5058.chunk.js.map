{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","restaurants","value","isLoading","error","handleChange","bind","assertThisInitialized","onSearchSubmit","fetchResults","e","setState","target","preventDefault","url","_this2","fetch","concat","then","response","ok","json","Error","data","catch","_this$state","react_default","a","createElement","message","className","onSubmit","type","placeholder","onChange","map","restaurant","key","id","src","image_url","alt","name","address","city","price","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gOAmFeA,qBA9EX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,YAAa,GACbC,MAAO,GACPC,WAAW,EACXC,MAAO,MAGXX,EAAKY,aAAeZ,EAAKY,aAAaC,KAAlBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KACpBA,EAAKe,eAAiBf,EAAKe,eAAeF,KAApBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KAEtBA,EAAKgB,aAAehB,EAAKgB,aAAaH,KAAlBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KAZLA,4EAeNiB,GACTd,KAAKe,SAAS,CAAET,MAAOQ,EAAEE,OAAOV,+CAGrBQ,GAEXA,EAAEG,iBACFjB,KAAKa,oDAGIK,GAAI,IAAAC,EAAAnB,KACdA,KAAKe,SAAS,CAAER,WAAW,IAC1Ba,MAAK,uDAAAC,OAAwDrB,KAAKI,MAAME,QACnEgB,KAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAASE,OAEhB,MAAM,IAAIC,MAAM,8BAGnBJ,KAAK,SAAAK,GAAI,OAAIR,EAAKJ,SAAS,CAAEV,YAAasB,EAAKtB,YAAaE,WAAW,MACvEqB,MAAM,SAAApB,GAAK,OAAIW,EAAKJ,SAAS,CAAEP,QAAOD,WAAW,uCAGjD,IAAAsB,EAEsB7B,KAAKI,MAA1BG,EAFDsB,EAECtB,UAAWC,EAFZqB,EAEYrB,MAEnB,OAAIA,EACGsB,EAAAC,EAAAC,cAAA,SAAIxB,EAAMyB,SAGb1B,EACKuB,EAAAC,EAAAC,cAAA,KAAGE,UAAU,OAAb,eAIDJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OAEXJ,EAAAC,EAAAC,cAAA,QAAMG,SAAWnC,KAAKY,gBAClBkB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eAAf,uCACAJ,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOF,UAAU,aAAaG,YAAY,OAAOC,SAAWtC,KAAKS,eAC7EqB,EAAAC,EAAAC,cAAA,SAAOI,KAAK,SAASF,UAAU,gBAAgB5B,MAAM,YAIzDwB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACZlC,KAAKI,MAAMC,YAAYkC,IAAI,SAAAC,GAAU,OACpCV,EAAAC,EAAAC,cAAA,OAAKS,IAAKD,EAAWE,GAAIR,UAAU,gBACjCJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cAAaJ,EAAAC,EAAAC,cAAA,OAAKW,IAAKH,EAAWI,UAAWC,IAAKL,EAAWM,QAC5EhB,EAAAC,EAAAC,cAAA,oBAAWF,EAAAC,EAAAC,cAAA,QAAME,UAAU,UAAUM,EAAWM,OAChDhB,EAAAC,EAAAC,cAAA,uBAAcF,EAAAC,EAAAC,cAAA,QAAME,UAAU,UAAUM,EAAWO,QAArC,KAAgDP,EAAWQ,OACzElB,EAAAC,EAAAC,cAAA,qBAAYF,EAAAC,EAAAC,cAAA,QAAME,UAAU,UAAUM,EAAWS,QACjDnB,EAAAC,EAAAC,cAAA,uBArENkB,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,KAAK,SAAA2C,GACjCA,EAAaC","file":"static/js/main.101c5058.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            restaurants: [],\n            value: '',\n            isLoading: false,\n            error: null\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.onSearchSubmit = this.onSearchSubmit.bind(this);\n\n        this.fetchResults = this.fetchResults.bind(this);\n    }\n\n    handleChange(e){\n        this.setState({ value: e.target.value });\n    }\n\n    onSearchSubmit(e){\n        // using the city parametar\n        e.preventDefault();\n        this.fetchResults();\n    }\n\n    fetchResults(url){\n       this.setState({ isLoading: true });\n        fetch(`http://opentable.herokuapp.com/api/restaurants?city=${this.state.value}`)\n            .then(response => {\n              if (response.ok) {\n                return response.json();\n              } else {\n                throw new Error('Something went wrong ...');\n              }\n            })\n            .then(data => this.setState({ restaurants: data.restaurants, isLoading: false }))\n            .catch(error => this.setState({ error, isLoading: false }));\n    }\n\n    render() {\n\n      const { isLoading, error } = this.state;\n\n      if (error) {\n      return <p>{error.message}</p>;\n      }\n\n      if (isLoading) {\n        return <p className=\"App\">Loading ...</p>;\n      }\n       else {\n          return (\n              <div className=\"App\">\n               \n                  <form onSubmit={ this.onSearchSubmit }>\n                      <div className='search-text'>Enter city name to find restaurants</div>\n                      <input type='text' className='search-bar' placeholder='city' onChange={ this.handleChange }/>\n                      <input type='submit' className='search-submit' value='Search'/>\n                  </form>\n               \n\n                  <div className='results-content'>\n                    {this.state.restaurants.map(restaurant => (\n                      <div key={restaurant.id} className=\"card-content\">\n                        <div className=\"margin-img\"><img src={restaurant.image_url} alt={restaurant.name}/></div>\n                        <div>Name: <span className=\"accent\">{restaurant.name}</span></div>\n                        <div>Address: <span className=\"accent\">{restaurant.address}, {restaurant.city}</span></div>\n                        <div>Price: <span className=\"accent\">{restaurant.price}</span></div>\n                        <br/>\n                      </div>\n                      ))}\n                  </div>\n              </div>\n            )\n         }  \n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}